import argparse
import json
import logging
import os
import threading
from datetime import datetime
from seven_zip import SevenZip

def archive_folder(folder_path, archive_dir, archive_individual, archive_name, age):
    try:
        # Create an instance of the SevenZip class
        sevenzip = SevenZip()
        sevenzip.archive_folder(folder_path, archive_dir, archive_individual, archive_name, age)
    except Exception as e:
        # If an exception occurs during archival, log an error message with details about the failed folder
        logging.error(f"Error archiving folder {folder_path}: {str(e)}")
        raise e

def archive_folder_thread(folder):
    try:
        folder_path = folder['folder_path']
        age = folder.get('age', None)
        pattern = folder.get('pattern', None)
        archive_individual = folder.get('archive_individual', False)
        archive_name = folder.get('archive_name', None)
        archive_dir = folder.get('archive_dir', 'archives/')

        # Call the archive_folder function with the specified arguments
        archive_folder(folder_path, archive_dir, archive_individual, archive_name, age)
    except Exception as e:
        # If an exception occurs during archival, log an error message with details about the failed thread
        logging.error(f"Error archiving folder in thread {threading.current_thread().name}: {str(e)}")

def main(source):
    # Read the JSON file containing the folders to archive
    with open(source, 'r') as f:
        folders_to_archive = json.load(f)

    # Create a thread for each folder to archive
    threads = []
    for folder in folders_to_archive:
        t = threading.Thread(target=archive_folder_thread, args=(folder,))
        threads.append(t)

    # Start the threads in parallel
    for t in threads:
        t.start()

    # Wait for all threads to complete
    for t in threads:
        t.join()

if __name__ == '__main__':
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Archive folders specified in a JSON file')
    parser.add_argument('source', help='Name of the JSON file containing the folders to archive')
    args = parser.parse_args()

    # Initialize logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s')

    # Call the main function with the specified source file
    main(args.source)



import os
import zipfile

def extract_zip(archive_path, extract_dir=None, file_filter=None):
    """
    Extract files from a zip archive.

    Args:
        archive_path (str): Path to the zip archive.
        extract_dir (str, optional): Directory to extract files to. Defaults to None (current working directory).
        file_filter (list of str, optional): List of file extensions to extract. Defaults to None (extract all files).

    Returns:
        None.
    """

    # check if archive exists
    if not os.path.exists(archive_path):
        raise FileNotFoundError(f'Archive {archive_path} does not exist')

    # check if extract_dir exists
    if extract_dir is not None and not os.path.exists(extract_dir):
        raise FileNotFoundError(f'Extract directory {extract_dir} does not exist')

    # open the archive and extract files
    with zipfile.ZipFile(archive_path, 'r') as archive:
        # get a list of all files in the archive that match the filter
        if file_filter is None:
            files_to_extract = archive.namelist()
        else:
            files_to_extract = [f for f in archive.namelist() if os.path.splitext(f)[1] in file_filter]

        # extract each file to the specified directory
        for file_path in files_to_extract:
            # get the full path to the file in the archive
            full_path = os.path.join(archive_path, file_path)

            # get the destination path for the extracted file
            if extract_dir is not None:
                dest_path = os.path.join(extract_dir, file_path)
            else:
                dest_path = file_path

            # create the destination directory if it does not exist
            os.makedirs(os.path.dirname(dest_path), exist_ok=True)

            # extract the file
            with archive.open(file_path) as src_file, open(dest_path, 'wb') as dest_file:
                dest_file.write(src_file.read())

    print(f'Files extracted successfully to {extract_dir or "."}')
