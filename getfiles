import os
import re
import time
import threading

class FileLister:
    def __init__(self, path, patterns=['.*'], age=None, recursive=False, depth=None, min_depth=None, max_depth=None, sorted_by=None, use_threads=False):
        self.path = path
        self.patterns = patterns
        self.age = age
        self.recursive = recursive
        self.depth = depth if depth is not None else 1
        self.min_depth = min_depth if min_depth is not None else 1
        self.max_depth = max_depth if max_depth is not None else float('inf')
        self.sorted_by = sorted_by
        self.use_threads = use_threads

    def _match_patterns(self, filename):
        for pattern in self.patterns:
            if re.match(pattern, filename):
                return True
        return False

    def _check_age(self, filename):
        if self.age is None:
            return True
        else:
            age_seconds = time.time() - os.path.getctime(filename)
            age_days = age_seconds / (60 * 60 * 24)
            return age_days <= self.age

    def _list_files_helper(self, directory, depth):
        if self.recursive and depth > self.max_depth:
            return []
        if not self.recursive and depth > 1:
            return []
        files = []
        for filename in os.listdir(directory):
            filepath = os.path.join(directory, filename)
            if os.path.isdir(filepath):
                if self.recursive and depth < self.max_depth:
                    files.extend(self._list_files_helper(filepath, depth+1))
            elif self._match_patterns(filename) and self._check_age(filepath):
                files.append(filepath)
        return files

    def list_files(self):
        if self.use_threads:
            result = []
            lock = threading.Lock()
            threads = []
            for depth in range(self.min_depth, self.depth+1):
                t = threading.Thread(target=self._list_files_helper, args=(self.path, depth), kwargs={}, daemon=True)
                threads.append(t)
                t.start()

            for t in threads:
                t.join()
                files = t.result
                with lock:
                    result.extend(files)
        else:
            result = self._list_files_helper(self.path, 1)

        if self.sorted_by is not None:
            result.sort(key=lambda x: os.path.getmtime(x) if self.sorted_by == 'modified' else os.path.getctime(x))
        return result


## How to 
# List all files in a directory
lister = FileLister(path='/path/to/directory')
files = lister.list_files()

# List all files with patterns 'txt' or 'pdf' in a directory and its subdirectories, created within the last 7 days
lister = FileLister(path='/path/to/directory', patterns=['.*txt', '.*pdf'], age=7, recursive=True)
files = lister.list_files()

# List all files in a directory and its subdirectories, with a maximum depth of 3
lister = FileLister(path='/path/to/directory', recursive=True, max_depth=3)
files = lister.list_files()

# List all files in a directory and its subdirectories, sorted by modification time
lister = FileLister(path='/path/to/directory', recursive=True, sorted_by='modified')
files = lister.list_files()

# List all files in a directory and its subdirectories using threads with a maximum depth of 3
lister = FileLister(path='/path/to/directory', recursive=True, max_depth=3, use_threads=True)
files = lister.list_files()

# List all files in a directory and its subdirectories, using threads with a maximum depth of 3, and sorting by modification time
lister = FileLister(path='/path/to/directory', recursive=True, max_depth=3, sorted_by='modified', use_threads=True)
files = lister.list_files()

# List all files in a directory and its subdirectories, with a minimum depth of 2 and a maximum depth of 4
lister = FileLister(path='/path/to/directory', recursive=True, min_depth=2, max_depth=4)
files = lister.list_files()

# List all files in a directory and its subdirectories, with a maximum age of 30 days
lister = FileLister(path='/path/to/directory', age=30)
files = lister.list_files()

# List all files in a directory and its subdirectories, with patterns including special characters
lister = FileLister(path='/path/to/directory', patterns=['.*\.txt', '.*\?.pdf'])
files = lister.list_files()
