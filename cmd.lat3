import subprocess
import threading
import queue
import sys

class ExecuteCommand:
    def __init__(self, shell_name):
        self.shell_name = shell_name
        self.output_queue = queue.Queue()
        self.command_process = None

    def open_session(self):
        if sys.platform == 'win32':
            self.command_process = subprocess.Popen(
                [self.shell_name],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True,
                bufsize=0,
                shell=True
            )
        else:
            self.command_process = subprocess.Popen(
                [self.shell_name],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True,
                bufsize=0,
            )
        
        # Start a separate thread to read the command output
        output_thread = threading.Thread(target=self._read_output)
        output_thread.start()

    def execute_command(self, command):
        self.command_process.stdin.write(command + '\n')
        self.command_process.stdin.flush()

    def close_session(self):
        # Close the command process and wait for it to finish
        self.command_process.stdin.close()
        self.command_process.wait()

        # Signal the output thread to stop and wait for it to finish
        self.output_queue.put(None)
        self.output_thread.join()

    def _read_output(self):
        for line in iter(self.command_process.stdout.readline, ''):
            self.output_queue.put(line)
        self.output_queue.put(None)
