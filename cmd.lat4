import subprocess

class CommandExecutionError(Exception):
    pass

class CommandExecutor:
    def __init__(self, shell=False):
        self.shell = shell

    def execute_command(self, command, *args):
        try:
            if self.shell:
                command_str = '{} {}'.format(command, ' '.join(args))
                process = subprocess.Popen(command_str, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
            else:
                command_list = [command] + list(args)
                process = subprocess.Popen(command_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            output, error = process.communicate()
            if process.returncode != 0:
                raise CommandExecutionError(error.decode('utf-8'))
            return output.decode('utf-8'), error.decode('utf-8')
        except subprocess.CalledProcessError as e:
            raise CommandExecutionError(str(e))



executor = CommandExecutor(shell=True)

try:
    output, error = executor.execute_command('dir /w')
    print(output)
except CommandExecutionError as e:
    print(e)
